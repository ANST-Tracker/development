---
version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
    - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-server:7.2.1
    hostname: kafka
    container_name: kafka
    depends_on:
    - zookeeper
    ports:
    - "9092:9092"
    - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
    - "10.0.11.1:8080:8080"
    environment:
      AUTH_TYPE: DISABLED
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
    - kafka

  mongo1:
    image: mongo:latest
    ports:
      - "10.0.11.1:27017:27017"
    restart: always
    volumes:
      - mongodb_data_1:/data/db
    command: mongod --replSet dev-mongo-set --bind_ip_all
  mongo2:
    image: mongo:latest
    ports:
      - "10.0.11.1:27018:27017"
    restart: always
    volumes:
      - mongodb_data_2:/data/db
    command: mongod --replSet dev-mongo-set --bind_ip_all
  mongo3:
    image: mongo:latest
    ports:
      - "10.0.11.1:27019:27017"
    restart: always
    volumes:
      - mongodb_data_3:/data/db
    command: mongod --replSet dev-mongo-set --bind_ip_all

  mongoinit:
    image: mongo:latest
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    command: >
      mongosh --host mongo1:27017 --eval 
      '
      db = (new Mongo("mongo1:27017")).getDB("test");
      config = {
      "_id" : "dev-mongo-set",
      "members" : [
        {
          "_id" : 0,
          "priority": 1,
          "host" : "mongo1:27017"
        },
        {
          "_id" : 1,
          "priority": 0.5,
          "host" : "mongo2:27017"
        },
        {
          "_id" : 2,
          "priority": 0.5,
          "host" : "mongo3:27017"
        }
      ]
      };
      rs.initiate(config);
      '
  postgres:
    image: postgres:14.1-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: always
    env_file:
      - secrets_profile.yaml

  redis:
    image: redis:7-alpine
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - redis_data:/data
    ports:
      - 10.0.11.1:6379:6379
    restart: always

  api:
    image: allokanic/api
    depends_on:
      - mongoinit
      - kafka
      - redis
      - postgres
    ports:
      - 80:8080
    env_file:
      - secrets_profile.yaml
    restart: always

  tg-bot:
    image: allokanic/tg-bot
    depends_on:
      - mongoinit
      - kafka
      - kafka-ui
      - redis
      - postgres
    env_file:
      - secrets_profile.yaml
    restart: always

volumes:
  postgres_volume:
  mongodb_data_1:
  mongodb_data_2:
  mongodb_data_3:
  redis_data:
